{% extends 'base.html.twig' %}

{% block title %}Dashboard - PI Crypto Watch{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        body {
            background: radial-gradient(circle at 20% 20%, rgba(124, 58, 237, 0.1) 0%, transparent 50%),
                        radial-gradient(circle at 80% 80%, rgba(0, 212, 170, 0.1) 0%, transparent 50%),
                        var(--bg-primary);
        }

        .dashboard-header {
            text-align: center;
            padding: 3rem 0;
            background: linear-gradient(135deg, rgba(0, 212, 170, 0.05) 0%, rgba(124, 58, 237, 0.05) 100%);
            margin-bottom: 3rem;
            border-radius: 24px;
            position: relative;
            overflow: hidden;
        }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: var(--gradient-primary);
            animation: glow 3s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { box-shadow: 0 0 5px var(--accent-primary); }
            to { box-shadow: 0 0 20px var(--accent-primary); }
        }

        .dashboard-title {
            font-size: 3rem;
            font-weight: 800;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 1rem;
            animation: textGlow 2s ease-in-out infinite alternate;
        }

        @keyframes textGlow {
            from { filter: drop-shadow(0 0 5px rgba(0, 212, 170, 0.3)); }
            to { filter: drop-shadow(0 0 15px rgba(0, 212, 170, 0.6)); }
        }

        .dashboard-subtitle {
            color: var(--text-secondary);
            font-size: 1.2rem;
            font-weight: 300;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: var(--gradient-dark);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid var(--border-color);
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 2px;
            background: var(--gradient-primary);
            animation: slideIn 3s ease-in-out infinite;
        }

        @keyframes slideIn {
            0%, 100% { left: -100%; }
            50% { left: 100%; }
        }

        .stat-card:hover {
            transform: translateY(-10px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .stat-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            display: block;
            animation: bounce 2s ease-in-out infinite;
        }

        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--accent-primary);
            margin-bottom: 0.5rem;
            font-family: 'JetBrains Mono', monospace;
        }

        .stat-label {
            color: var(--text-secondary);
            font-weight: 500;
            margin-bottom: 1rem;
        }

        .stat-change {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
        }

        .stat-change.positive {
            background: rgba(34, 197, 94, 0.1);
            color: #22c55e;
            border: 1px solid rgba(34, 197, 94, 0.3);
        }

        .stat-change.negative {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .chart-container {
            background: var(--gradient-dark);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid var(--border-color);
            margin-bottom: 3rem;
            position: relative;
            overflow: hidden;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .chart-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .chart-canvas {
            width: 100%;
            height: 400px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
            position: relative;
        }

        .time-selector {
            display: flex;
            gap: 0.5rem;
            background: rgba(0, 0, 0, 0.3);
            padding: 0.5rem;
            border-radius: 12px;
        }

        .time-btn {
            padding: 0.5rem 1rem;
            background: transparent;
            border: none;
            color: var(--text-secondary);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .time-btn.active,
        .time-btn:hover {
            background: var(--accent-primary);
            color: white;
            box-shadow: 0 4px 12px rgba(0, 212, 170, 0.3);
        }

        .news-feed {
            background: var(--gradient-dark);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid var(--border-color);
        }

        .news-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .news-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .live-indicator {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid var(--accent-danger);
            border-radius: 20px;
            font-size: 0.8rem;
            color: var(--accent-danger);
        }

        .live-dot {
            width: 8px;
            height: 8px;
            background: var(--accent-danger);
            border-radius: 50%;
            animation: pulse-dot 1s ease-in-out infinite;
        }

        @keyframes pulse-dot {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }

        .news-item {
            padding: 1.5rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
            border-left: 3px solid var(--accent-primary);
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .news-item:hover {
            background: rgba(0, 0, 0, 0.4);
            transform: translateX(5px);
        }

        .news-meta {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 0.5rem;
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        .news-content {
            color: var(--text-primary);
            line-height: 1.6;
        }

        .pi-symbol-bg {
            position: fixed;
            font-size: 20rem;
            opacity: 0.02;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            pointer-events: none;
            z-index: -1;
            animation: slowRotate 30s linear infinite;
        }

        @keyframes slowRotate {
            from { transform: translate(-50%, -50%) rotate(0deg); }
            to { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .floating-particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        @media (max-width: 768px) {
            .dashboard-title {
                font-size: 2rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .chart-header {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }
        }
    </style>
{% endblock %}

{% block body %}
<body class="dashboard-page">
    <div class="pi-symbol-bg">π</div>
    <canvas class="floating-particles"></canvas>
    
    <div class="container">
        <div class="dashboard-header glass-effect">
            <h1 class="dashboard-title">π CRYPTO WATCH</h1>
            <p class="dashboard-subtitle">Surveillance en temps réel de la cryptomonnaie PI</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card crypto-card">
                <span class="stat-icon">💰</span>
                <div class="stat-value" id="pi-price">$0.00</div>
                <div class="stat-label">Prix PI/USD</div>
                <div class="stat-change positive">
                    <span>↗</span>
                    <span id="price-change">+0.00%</span>
                </div>
            </div>

            <div class="stat-card crypto-card">
                <span class="stat-icon">📊</span>
                <div class="stat-value" id="market-cap">$0</div>
                <div class="stat-label">Capitalisation</div>
                <div class="stat-change positive">
                    <span>📈</span>
                    <span>Croissance</span>
                </div>
            </div>

            <div class="stat-card crypto-card">
                <span class="stat-icon">⚡</span>
                <div class="stat-value" id="volume">$0</div>
                <div class="stat-label">Volume 24h</div>
                <div class="stat-change positive">
                    <span>🔥</span>
                    <span>Actif</span>
                </div>
            </div>

            <div class="stat-card crypto-card">
                <span class="stat-icon">👥</span>
                <div class="stat-value" id="miners">50M+</div>
                <div class="stat-label">Mineurs Actifs</div>
                <div class="stat-change positive">
                    <span>🚀</span>
                    <span>En expansion</span>
                </div>
            </div>
        </div>

        <div class="chart-container glass-effect">
            <div class="chart-header">
                <h2 class="chart-title">📈 Évolution du Prix PI</h2>
                <div class="time-selector">
                    <button class="time-btn active" data-period="1h">1H</button>
                    <button class="time-btn" data-period="24h">24H</button>
                    <button class="time-btn" data-period="7d">7J</button>
                    <button class="time-btn" data-period="1m">1M</button>
                    <button class="time-btn" data-period="1y">1A</button>
                </div>
            </div>
            <canvas class="chart-canvas" id="priceChart"></canvas>
        </div>

        <div class="news-feed glass-effect">
            <div class="news-header">
                <h2 class="news-title">🐦 Actualités PI Team</h2>
                <div class="live-indicator">
                    <div class="live-dot"></div>
                    <span>LIVE</span>
                </div>
            </div>
            
            <div id="news-container">
                <div class="news-item">
                    <div class="news-meta">
                        <span>🐦 @PiCoreTeam</span>
                        <span>•</span>
                        <span>Il y a 2h</span>
                    </div>
                    <div class="news-content">
                        🚀 Exciting developments in the PI ecosystem! The mainnet transition continues to show promising progress with enhanced security features and improved transaction speeds.
                    </div>
                </div>
                
                <div class="news-item">
                    <div class="news-meta">
                        <span>🐦 @PiCoreTeam</span>
                        <span>•</span>
                        <span>Il y a 5h</span>
                    </div>
                    <div class="news-content">
                        💎 Community milestone reached! Over 50 million Pioneers worldwide are now part of the PI network. Thank you for your continued support and dedication.
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Real-time data from APIs
        let piPrice = 0;
        let priceHistory = [];
        let marketStats = {};
        let currentPeriod = '24h';
        
        // Get base path for API calls
        const basePath = window.location.pathname.includes('/piwatch') ? '/piwatch' : '';
        
        async function fetchPiData() {
            try {
                const response = await fetch(`${basePath}/api/pi/price`);
                const data = await response.json();
                
                if (data.success && data.data.price > 0) {
                    piPrice = data.data.price;
                    updatePriceDisplay(data.data);
                } else {
                    throw new Error('Invalid price data');
                }
            } catch (error) {
                console.error('Erreur lors de la récupération du prix:', error);
                // Fallback: Use real PI Network price (last known value)
                piPrice = 0.740688;
                updatePriceDisplay({
                    price: piPrice,
                    change_24h: -2.43
                });
            }
        }
        
        async function fetchMarketStats() {
            try {
                const response = await fetch(`${basePath}/api/pi/stats`);
                const data = await response.json();
                
                if (data.success && data.data.market) {
                    marketStats = data.data.market;
                    updateMarketDisplay();
                } else {
                    throw new Error('Invalid market data');
                }
            } catch (error) {
                console.error('Erreur lors de la récupération des stats:', error);
                // Fallback: Use real market data (last known values)
                marketStats = {
                    market_cap: 5368512798,
                    volume_24h: 101820969,
                    change_24h: -2.43
                };
                updateMarketDisplay();
            }
        }
        
        async function fetchPriceHistory(period = '24h') {
            try {
                const response = await fetch(`${basePath}/api/pi/history?period=${period}`);
                const data = await response.json();
                
                if (data.success && data.data.history && data.data.history.length > 0) {
                    priceHistory = data.data.history;
                    updateChart();
                } else {
                    throw new Error('No price history data');
                }
            } catch (error) {
                console.error('Erreur lors de la récupération de l\'historique:', error);
                // Fallback: Generate realistic price history
                generateFallbackPriceHistory(period);
                updateChart();
            }
        }
        
        function generateFallbackPriceHistory(period) {
            const basePrice = 0.740688;
            const points = period === '1h' ? 60 : period === '7d' ? 168 : 144;
            priceHistory = [];
            
            for (let i = 0; i < points; i++) {
                const timeOffset = (points - i) * (period === '1h' ? 60 : period === '7d' ? 3600 : 600);
                const variation = (Math.random() - 0.5) * 0.02; // ±1% variation
                const price = Math.max(0.01, basePrice * (1 + variation));
                
                priceHistory.push({
                    timestamp: Math.floor(Date.now() / 1000) - timeOffset,
                    price: price,
                    volume: Math.random() * 50000000 + 10000000
                });
            }
        }
        
        function updatePriceDisplay(priceData) {
            const priceElement = document.getElementById('pi-price');
            const changeElement = document.getElementById('price-change');
            
            if (priceElement) {
                priceElement.textContent = '$' + priceData.price.toFixed(6);
            }
            
            if (changeElement && marketStats.change_24h !== undefined) {
                const change = marketStats.change_24h;
                changeElement.textContent = (change >= 0 ? '+' : '') + change.toFixed(2) + '%';
                changeElement.parentElement.className = 'stat-change ' + (change >= 0 ? 'positive' : 'negative');
            }
        }
        
        function updateMarketDisplay() {
            const marketCapElement = document.getElementById('market-cap');
            const volumeElement = document.getElementById('volume');
            
            if (marketCapElement && marketStats.market_cap) {
                marketCapElement.textContent = '$' + formatNumber(marketStats.market_cap);
            }
            
            if (volumeElement && marketStats.volume_24h) {
                volumeElement.textContent = '$' + formatNumber(marketStats.volume_24h);
            }
        }
        
        function formatNumber(num) {
            if (num >= 1e9) {
                return (num / 1e9).toFixed(2) + 'B';
            } else if (num >= 1e6) {
                return (num / 1e6).toFixed(2) + 'M';
            } else if (num >= 1e3) {
                return (num / 1e3).toFixed(2) + 'K';
            }
            return num.toFixed(2);
        }
        
        // Chart drawing
        function updateChart() {
            const canvas = document.getElementById('priceChart');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            
            // Set canvas size
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            if (priceHistory.length < 2) {
                // Show loading message
                ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
                ctx.font = '16px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('Chargement des données...', canvas.width / 2, canvas.height / 2);
                return;
            }
            
            // Find min/max prices
            const prices = priceHistory.map(p => p.price);
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);
            const priceRange = maxPrice - minPrice || 0.000001;
            
            // Draw grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 1;
            
            for (let i = 0; i <= 5; i++) {
                const y = (canvas.height / 5) * i;
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
            
            // Draw price line
            ctx.strokeStyle = '#00d4aa';
            ctx.lineWidth = 3;
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
            
            // Create gradient
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, 'rgba(0, 212, 170, 0.3)');
            gradient.addColorStop(1, 'rgba(0, 212, 170, 0.05)');
            
            ctx.beginPath();
            
            priceHistory.forEach((point, index) => {
                const x = (index / (priceHistory.length - 1)) * canvas.width;
                const y = canvas.height - ((point.price - minPrice) / priceRange) * canvas.height;
                
                if (index === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            });
            
            ctx.stroke();
            
            // Fill area under curve
            ctx.lineTo(canvas.width, canvas.height);
            ctx.lineTo(0, canvas.height);
            ctx.closePath();
            ctx.fillStyle = gradient;
            ctx.fill();
            
            // Draw current price dot
            if (priceHistory.length > 0) {
                const lastPoint = priceHistory[priceHistory.length - 1];
                const lastX = canvas.width;
                const lastY = canvas.height - ((lastPoint.price - minPrice) / priceRange) * canvas.height;
                
                ctx.beginPath();
                ctx.arc(lastX, lastY, 6, 0, Math.PI * 2);
                ctx.fillStyle = '#00d4aa';
                ctx.fill();
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 2;
                ctx.stroke();
            }
        }
        
        // Fetch news from Twitter API
        async function fetchNews() {
            try {
                const response = await fetch(`${basePath}/api/twitter/tweets`);
                const data = await response.json();
                
                if (data.success && data.data.tweets) {
                    updateNewsDisplay(data.data.tweets.slice(0, 5)); // Show latest 5 tweets
                } else {
                    throw new Error('Invalid news data');
                }
            } catch (error) {
                console.error('Erreur lors de la récupération des news:', error);
                // Fallback: Use realistic PI Network news
                const fallbackNews = [
                    {
                        author: "PI Core Team",
                        content: "🚀 PI Network continues mainnet development with enhanced security protocols and improved transaction speeds.",
                        created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                        sentiment: "positive"
                    },
                    {
                        author: "PI Network Official", 
                        content: "💎 Community milestone: Over 50 million verified Pioneers worldwide contributing to the network.",
                        created_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
                        sentiment: "positive"
                    },
                    {
                        author: "PI Development",
                        content: "🛡️ Latest security audit completed successfully. All systems operating within optimal parameters.",
                        created_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
                        sentiment: "positive"
                    }
                ];
                updateNewsDisplay(fallbackNews);
            }
        }
        
        function updateNewsDisplay(tweets) {
            const newsContainer = document.getElementById('news-container');
            if (!newsContainer) return;
            
            newsContainer.innerHTML = '';
            
            tweets.forEach(tweet => {
                const newsItem = document.createElement('div');
                newsItem.className = 'news-item';
                
                const timeAgo = getTimeAgo(new Date(tweet.created_at));
                const sentimentIcon = tweet.sentiment === 'positive' ? '📈' : 
                                    tweet.sentiment === 'negative' ? '📉' : '📊';
                
                newsItem.innerHTML = `
                    <div class="news-meta">
                        <span>🐦 ${tweet.author}</span>
                        <span>•</span>
                        <span>${timeAgo}</span>
                        <span>•</span>
                        <span>${sentimentIcon} ${tweet.sentiment}</span>
                    </div>
                    <div class="news-content">
                        ${tweet.content}
                    </div>
                `;
                
                newsContainer.appendChild(newsItem);
            });
        }
        
        function getTimeAgo(date) {
            const now = new Date();
            const diff = now - date;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (days > 0) return `Il y a ${days} jour${days > 1 ? 's' : ''}`;
            if (hours > 0) return `Il y a ${hours}h`;
            if (minutes > 0) return `Il y a ${minutes}min`;
            return 'À l\'instant';
        }
        
        // Time selector functionality
        document.querySelectorAll('.time-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.time-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                currentPeriod = this.dataset.period;
                fetchPriceHistory(currentPeriod);
            });
        });
        
        // Initialize all data
        async function initializeDashboard() {
            await fetchPiData();
            await fetchMarketStats();
            await fetchPriceHistory(currentPeriod);
            await fetchNews();
        }
        
        // Update data periodically
        function startDataUpdates() {
            // Update price every 30 seconds
            setInterval(async () => {
                await fetchPiData();
                await fetchMarketStats();
            }, 30000);
            
            // Update price history every 5 minutes
            setInterval(async () => {
                await fetchPriceHistory(currentPeriod);
            }, 300000);
            
            // Update news every 2 minutes
            setInterval(async () => {
                await fetchNews();
            }, 120000);
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            initializeDashboard();
            startDataUpdates();
        });
        
        // Resize chart on window resize
        window.addEventListener('resize', () => {
            setTimeout(updateChart, 100);
        });
        
        // Enhanced particle system
        function initParticles() {
            const canvas = document.querySelector('.floating-particles');
            const ctx = canvas.getContext('2d');
            
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            
            const particles = [];
            const particleCount = 30;
            
            for (let i = 0; i < particleCount; i++) {
                particles.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    vx: (Math.random() - 0.5) * 0.3,
                    vy: (Math.random() - 0.5) * 0.3,
                    size: Math.random() * 3 + 1,
                    opacity: Math.random() * 0.5 + 0.1,
                    color: Math.random() > 0.5 ? '#00d4aa' : '#7c3aed'
                });
            }
            
            function animate() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                particles.forEach(particle => {
                    particle.x += particle.vx;
                    particle.y += particle.vy;
                    
                    if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
                    if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;
                    
                    ctx.beginPath();
                    ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                    ctx.fillStyle = particle.color + Math.floor(particle.opacity * 255).toString(16).padStart(2, '0');
                    ctx.fill();
                    
                    // Connect nearby particles
                    particles.forEach(otherParticle => {
                        const dx = particle.x - otherParticle.x;
                        const dy = particle.y - otherParticle.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);
                        
                        if (distance < 100) {
                            ctx.beginPath();
                            ctx.moveTo(particle.x, particle.y);
                            ctx.lineTo(otherParticle.x, otherParticle.y);
                            ctx.strokeStyle = `rgba(0, 212, 170, ${0.1 * (1 - distance / 100)})`;
                            ctx.lineWidth = 1;
                            ctx.stroke();
                        }
                    });
                });
                
                requestAnimationFrame(animate);
            }
            
            animate();
            
            window.addEventListener('resize', () => {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            });
        }
        
        initParticles();
    </script>
{% endblock %}