<!DOCTYPE html>
<html lang="fr" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}PI Crypto Watch{% endblock %}</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    
    {% block stylesheets %}
        <style>
            :root {
                --bg-primary: #0a0a0a;
                --bg-secondary: #1a1a1a;
                --bg-tertiary: #2a2a2a;
                --text-primary: #ffffff;
                --text-secondary: #a0a0a0;
                --text-muted: #666666;
                --accent-primary: #00d4aa;
                --accent-secondary: #7c3aed;
                --accent-warning: #f59e0b;
                --accent-danger: #ef4444;
                --border-color: #333333;
                --shadow-primary: 0 8px 32px rgba(0, 0, 0, 0.6);
                --shadow-glow: 0 0 20px rgba(0, 212, 170, 0.3);
                --gradient-primary: linear-gradient(135deg, #00d4aa 0%, #7c3aed 100%);
                --gradient-dark: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
            }

            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                background: var(--bg-primary);
                color: var(--text-primary);
                min-height: 100vh;
                line-height: 1.6;
                overflow-x: hidden;
            }

            .container {
                max-width: 1400px;
                margin: 0 auto;
                padding: 0 2rem;
            }

            .glass-effect {
                background: rgba(26, 26, 26, 0.8);
                backdrop-filter: blur(20px);
                border: 1px solid var(--border-color);
                border-radius: 16px;
            }

            .btn {
                padding: 12px 24px;
                border: none;
                border-radius: 8px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.3s ease;
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                gap: 8px;
                font-size: 14px;
            }

            .btn-primary {
                background: var(--gradient-primary);
                color: white;
                box-shadow: var(--shadow-glow);
            }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 0 30px rgba(0, 212, 170, 0.5);
            }

            .btn-ghost {
                background: transparent;
                color: var(--text-secondary);
                border: 1px solid var(--border-color);
            }

            .btn-ghost:hover {
                background: var(--bg-tertiary);
                color: var(--text-primary);
                border-color: var(--accent-primary);
            }

            .form-group {
                margin-bottom: 1.5rem;
            }

            .form-control {
                width: 100%;
                padding: 16px;
                background: var(--bg-secondary);
                border: 1px solid var(--border-color);
                border-radius: 8px;
                color: var(--text-primary);
                font-size: 16px;
                transition: all 0.3s ease;
            }

            .form-control:focus {
                outline: none;
                border-color: var(--accent-primary);
                box-shadow: 0 0 0 3px rgba(0, 212, 170, 0.1);
            }

            .navbar {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                padding: 1rem 0;
                background: rgba(10, 10, 10, 0.9);
                backdrop-filter: blur(20px);
                border-bottom: 1px solid var(--border-color);
            }

            .navbar-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .logo {
                font-size: 24px;
                font-weight: 700;
                background: var(--gradient-primary);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }

            .nav-tabs {
                display: flex;
                gap: 2rem;
            }

            .nav-tab {
                color: var(--text-secondary);
                text-decoration: none;
                font-weight: 500;
                padding: 8px 16px;
                border-radius: 6px;
                transition: all 0.3s ease;
            }

            .nav-tab:hover,
            .nav-tab.active {
                color: var(--accent-primary);
                background: rgba(0, 212, 170, 0.1);
            }

            .main-content {
                margin-top: 80px;
                min-height: calc(100vh - 80px);
            }

            .fade-in {
                animation: fadeInUp 0.8s ease-out;
            }

            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(30px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .pulse {
                animation: pulse 2s infinite;
            }

            @keyframes pulse {
                0%, 100% {
                    box-shadow: 0 0 20px rgba(0, 212, 170, 0.3);
                }
                50% {
                    box-shadow: 0 0 40px rgba(0, 212, 170, 0.6);
                }
            }

            .glow-text {
                text-shadow: 0 0 20px rgba(0, 212, 170, 0.5);
            }

            .crypto-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 2rem;
                margin: 2rem 0;
            }

            .crypto-card {
                background: var(--gradient-dark);
                border-radius: 16px;
                padding: 2rem;
                border: 1px solid var(--border-color);
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
            }

            .crypto-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: var(--gradient-primary);
                transform: translateX(-100%);
                transition: transform 0.5s ease;
            }

            .crypto-card:hover::before {
                transform: translateX(0);
            }

            .crypto-card:hover {
                transform: translateY(-5px);
                box-shadow: var(--shadow-primary);
            }

            .copyright-footer {
                position: fixed;
                bottom: 0;
                left: 0;
                right: 0;
                background: rgba(10, 10, 10, 0.95);
                backdrop-filter: blur(20px);
                border-top: 1px solid var(--border-color);
                padding: 12px 0;
                z-index: 999;
            }

            .footer-content {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .copyright-text {
                font-size: 13px;
                color: var(--text-secondary);
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .talent-link {
                color: var(--accent-primary);
                text-decoration: none;
                display: flex;
                align-items: center;
                gap: 6px;
                transition: all 0.3s ease;
            }

            .talent-link:hover {
                color: var(--text-primary);
                transform: translateY(-1px);
            }

            .talent-logo {
                width: 20px;
                height: 20px;
                filter: brightness(0) saturate(100%) invert(69%) sepia(77%) saturate(3398%) hue-rotate(145deg) brightness(96%) contrast(101%);
            }

            .talent-link:hover .talent-logo {
                filter: brightness(0) saturate(100%) invert(100%);
            }

            .main-content {
                margin-top: 80px;
                min-height: calc(100vh - 80px);
                padding-bottom: 60px;
            }

            /* Toast System */
            .toast-container {
                position: fixed;
                top: 100px;
                right: 20px;
                z-index: 10000;
                display: flex;
                flex-direction: column;
                gap: 10px;
                max-width: 350px;
            }

            .toast {
                background: var(--gradient-dark);
                border: 1px solid var(--border-color);
                border-radius: 12px;
                padding: 16px;
                box-shadow: var(--shadow-primary);
                backdrop-filter: blur(20px);
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
                position: relative;
                overflow: hidden;
            }

            .toast.show {
                opacity: 1;
                transform: translateX(0);
            }

            .toast::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: var(--gradient-primary);
                animation: toastProgress 5s linear;
            }

            @keyframes toastProgress {
                from { width: 100%; }
                to { width: 0%; }
            }

            .toast-success::before {
                background: linear-gradient(90deg, #22c55e, #16a34a);
            }

            .toast-info::before {
                background: linear-gradient(90deg, #3b82f6, #1d4ed8);
            }

            .toast-warning::before {
                background: linear-gradient(90deg, #f59e0b, #d97706);
            }

            .toast-error::before {
                background: linear-gradient(90deg, #ef4444, #dc2626);
            }

            .toast-header {
                display: flex;
                align-items: center;
                gap: 10px;
                margin-bottom: 8px;
            }

            .toast-icon {
                font-size: 18px;
            }

            .toast-title {
                font-weight: 600;
                color: var(--text-primary);
                font-size: 14px;
            }

            .toast-close {
                margin-left: auto;
                background: none;
                border: none;
                color: var(--text-muted);
                cursor: pointer;
                font-size: 16px;
                padding: 0;
                transition: color 0.3s ease;
            }

            .toast-close:hover {
                color: var(--text-primary);
            }

            .toast-message {
                color: var(--text-secondary);
                font-size: 13px;
                line-height: 1.4;
            }

            .toast-timestamp {
                color: var(--text-muted);
                font-size: 11px;
                margin-top: 8px;
                font-family: 'JetBrains Mono', monospace;
            }

            /* Crypto Tab Modal */
            .crypto-modal {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(10px);
                z-index: 9999;
                display: none;
                align-items: center;
                justify-content: center;
                padding: 20px;
            }

            .crypto-modal.show {
                display: flex;
            }

            .crypto-modal-content {
                background: var(--bg-primary);
                border: 1px solid var(--border-color);
                border-radius: 20px;
                width: 100%;
                max-width: 1200px;
                max-height: 90vh;
                overflow-y: auto;
                position: relative;
                animation: modalSlideIn 0.3s ease;
            }

            @keyframes modalSlideIn {
                from {
                    opacity: 0;
                    transform: scale(0.9) translateY(-50px);
                }
                to {
                    opacity: 1;
                    transform: scale(1) translateY(0);
                }
            }

            .crypto-modal-header {
                padding: 30px;
                border-bottom: 1px solid var(--border-color);
                display: flex;
                align-items: center;
                justify-content: space-between;
            }

            .crypto-modal-title {
                font-size: 24px;
                font-weight: 700;
                background: var(--gradient-primary);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }

            .crypto-modal-close {
                background: rgba(239, 68, 68, 0.1);
                border: 1px solid rgba(239, 68, 68, 0.3);
                color: #ef4444;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: all 0.3s ease;
                font-size: 16px;
            }

            .crypto-modal-close:hover {
                background: rgba(239, 68, 68, 0.2);
                transform: rotate(90deg);
            }

            .crypto-modal-body {
                padding: 30px;
            }

            @media (max-width: 768px) {
                .container {
                    padding: 0 1rem;
                }

                .nav-tabs {
                    gap: 1rem;
                }

                .crypto-grid {
                    grid-template-columns: 1fr;
                }

                .copyright-text {
                    font-size: 12px;
                }

                .talent-logo {
                    width: 16px;
                    height: 16px;
                }
            }
        </style>
    {% endblock %}
</head>
<body>
    {% if app.user %}
        <nav class="navbar">
            <div class="container">
                <div class="navbar-content">
                    <div class="logo">π CRYPTO WATCH</div>
                    <div class="nav-tabs">
                        <a href="{{ path('dashboard') }}" class="nav-tab {{ app.request.get('_route') == 'dashboard' ? 'active' : '' }}">
                            📈 Dashboard PI
                        </a>
                        <a href="{{ path('scenarios') }}" class="nav-tab {{ app.request.get('_route') == 'scenarios' ? 'active' : '' }}">
                            🔮 Scénarios IA
                        </a>
                        <a href="#" class="nav-tab" onclick="showCryptoTab(event)">
                            💰 Marché Crypto
                        </a>
                    </div>
                    <a href="{{ path('logout') }}" class="btn btn-ghost">
                        🚪 Déconnexion
                    </a>
                </div>
            </div>
        </nav>
    {% endif %}

    <!-- Toast Container -->
    <div class="toast-container" id="toast-container"></div>

    <!-- Crypto Modal -->
    <div class="crypto-modal" id="crypto-modal">
        <div class="crypto-modal-content">
            <div class="crypto-modal-header">
                <h2 class="crypto-modal-title">💰 Marché des Cryptomonnaies</h2>
                <button class="crypto-modal-close" onclick="closeCryptoModal()">×</button>
            </div>
            <div class="crypto-modal-body" id="crypto-modal-body">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <main class="main-content">
        {% block body %}{% endblock %}
    </main>

    <footer class="copyright-footer">
        <div class="container">
            <div class="footer-content">
                <div class="copyright-text">
                    © 2025 Antonin Nvh - pour 
                    <a href="https://talentai.fr" target="_blank" class="talent-link">
                        <img src="https://talentai.fr/images/circuitLogo_animated.svg" alt="TalentAI" class="talent-logo">
                        TalentAI
                    </a>
                </div>
            </div>
        </div>
    </footer>

    {% block javascripts %}
        <script>
            // Smooth animations
            document.addEventListener('DOMContentLoaded', function() {
                const observerOptions = {
                    root: null,
                    rootMargin: '0px',
                    threshold: 0.1
                };

                const observer = new IntersectionObserver(function(entries) {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('fade-in');
                        }
                    });
                }, observerOptions);

                document.querySelectorAll('.crypto-card, .glass-effect').forEach(el => {
                    observer.observe(el);
                });
            });

            // Dynamic background particles
            function createParticles() {
                const canvas = document.createElement('canvas');
                canvas.style.position = 'fixed';
                canvas.style.top = '0';
                canvas.style.left = '0';
                canvas.style.width = '100%';
                canvas.style.height = '100%';
                canvas.style.pointerEvents = 'none';
                canvas.style.zIndex = '-1';
                canvas.style.opacity = '0.3';
                document.body.appendChild(canvas);

                const ctx = canvas.getContext('2d');
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;

                const particles = [];
                const particleCount = 50;

                for (let i = 0; i < particleCount; i++) {
                    particles.push({
                        x: Math.random() * canvas.width,
                        y: Math.random() * canvas.height,
                        vx: (Math.random() - 0.5) * 0.5,
                        vy: (Math.random() - 0.5) * 0.5,
                        size: Math.random() * 2 + 1
                    });
                }

                function animate() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    
                    particles.forEach(particle => {
                        particle.x += particle.vx;
                        particle.y += particle.vy;

                        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
                        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;

                        ctx.beginPath();
                        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                        ctx.fillStyle = '#00d4aa';
                        ctx.fill();
                    });

                    requestAnimationFrame(animate);
                }

                animate();

                window.addEventListener('resize', () => {
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                });
            }

            if (document.body.classList.contains('dashboard-page')) {
                createParticles();
            }

            // Toast System
            function showToast(type, title, message, duration = 5000) {
                const toastContainer = document.getElementById('toast-container');
                const toast = document.createElement('div');
                const toastId = 'toast-' + Date.now();
                
                const icons = {
                    success: '✅',
                    info: 'ℹ️',
                    warning: '⚠️',
                    error: '❌'
                };
                
                toast.className = `toast toast-${type}`;
                toast.id = toastId;
                toast.innerHTML = `
                    <div class="toast-header">
                        <span class="toast-icon">${icons[type] || 'ℹ️'}</span>
                        <span class="toast-title">${title}</span>
                        <button class="toast-close" onclick="closeToast('${toastId}')">×</button>
                    </div>
                    <div class="toast-message">${message}</div>
                    <div class="toast-timestamp">${new Date().toLocaleTimeString('fr-FR')}</div>
                `;
                
                toastContainer.appendChild(toast);
                
                // Show animation
                setTimeout(() => {
                    toast.classList.add('show');
                }, 100);
                
                // Auto hide
                setTimeout(() => {
                    closeToast(toastId);
                }, duration);
                
                return toastId;
            }
            
            function closeToast(toastId) {
                const toast = document.getElementById(toastId);
                if (toast) {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toast.remove();
                    }, 400);
                }
            }

            // Crypto Modal System
            function showCryptoTab(event) {
                event.preventDefault();
                const modal = document.getElementById('crypto-modal');
                const modalBody = document.getElementById('crypto-modal-body');
                
                // Show loading
                modalBody.innerHTML = `
                    <div style="text-align: center; padding: 60px;">
                        <div style="font-size: 3rem; margin-bottom: 20px;">⏳</div>
                        <div style="color: var(--text-secondary);">Chargement des données crypto...</div>
                    </div>
                `;
                
                modal.classList.add('show');
                
                // Load crypto data
                setTimeout(() => {
                    loadCryptoData();
                }, 500);
                
                showToast('info', 'Marché Crypto', 'Ouverture du tableau de bord crypto en temps réel');
            }
            
            function closeCryptoModal() {
                document.getElementById('crypto-modal').classList.remove('show');
            }
            
            function loadCryptoData() {
                const modalBody = document.getElementById('crypto-modal-body');
                
                modalBody.innerHTML = `
                    <div class="crypto-header" style="margin-bottom: 30px; text-align: center;">
                        <h3 style="color: var(--text-primary); margin-bottom: 10px;">📊 Top Cryptomonnaies - Mise à jour temps réel</h3>
                        <div style="color: var(--text-secondary); font-size: 14px;">
                            <span style="color: var(--accent-primary);">🟢 LIVE</span> • Dernière mise à jour: <span id="crypto-last-update">${new Date().toLocaleTimeString('fr-FR')}</span>
                        </div>
                    </div>
                    
                    <div class="crypto-grid" id="crypto-grid">
                        <!-- Crypto cards will be loaded here -->
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid var(--border-color);">
                        <div style="color: var(--text-muted); font-size: 12px;">
                            Données fournies par APIs crypto • Mise à jour toutes les 30 secondes
                        </div>
                    </div>
                `;
                
                // Load initial crypto data
                updateCryptoData();
                
                // Auto-update every 30 seconds
                window.cryptoUpdateInterval = setInterval(updateCryptoData, 30000);
            }
            
            function updateCryptoData() {
                const grid = document.getElementById('crypto-grid');
                if (!grid) return;
                
                // Simulated crypto data (in real app, this would be API calls)
                const cryptos = [
                    { 
                        symbol: 'BTC', 
                        name: 'Bitcoin', 
                        price: 42750 + (Math.random() - 0.5) * 1000,
                        change: (Math.random() - 0.5) * 10,
                        icon: '₿',
                        color: '#f7931a'
                    },
                    { 
                        symbol: 'ETH', 
                        name: 'Ethereum', 
                        price: 2580 + (Math.random() - 0.5) * 200,
                        change: (Math.random() - 0.5) * 12,
                        icon: '♦',
                        color: '#627eea'
                    },
                    { 
                        symbol: 'BNB', 
                        name: 'BNB', 
                        price: 315 + (Math.random() - 0.5) * 30,
                        change: (Math.random() - 0.5) * 8,
                        icon: '🔶',
                        color: '#f3ba2f'
                    },
                    { 
                        symbol: 'XRP', 
                        name: 'Ripple', 
                        price: 0.58 + (Math.random() - 0.5) * 0.1,
                        change: (Math.random() - 0.5) * 15,
                        icon: '💧',
                        color: '#23292f'
                    },
                    { 
                        symbol: 'SOL', 
                        name: 'Solana', 
                        price: 98 + (Math.random() - 0.5) * 20,
                        change: (Math.random() - 0.5) * 18,
                        icon: '☀️',
                        color: '#9945ff'
                    },
                    { 
                        symbol: 'ADA', 
                        name: 'Cardano', 
                        price: 0.45 + (Math.random() - 0.5) * 0.08,
                        change: (Math.random() - 0.5) * 12,
                        icon: '🔵',
                        color: '#0033ad'
                    },
                    { 
                        symbol: 'DOGE', 
                        name: 'Dogecoin', 
                        price: 0.08 + (Math.random() - 0.5) * 0.02,
                        change: (Math.random() - 0.5) * 20,
                        icon: '🐕',
                        color: '#c2a633'
                    },
                    { 
                        symbol: 'PI', 
                        name: 'PI Network', 
                        price: 0.42 + (Math.random() - 0.5) * 0.1,
                        change: (Math.random() - 0.5) * 8,
                        icon: 'π',
                        color: '#00d4aa'
                    }
                ];
                
                grid.innerHTML = cryptos.map(crypto => {
                    const isPositive = crypto.change >= 0;
                    const priceDisplay = crypto.price < 1 ? 
                        crypto.price.toFixed(6) : 
                        crypto.price.toLocaleString('fr-FR', { maximumFractionDigits: 2 });
                    
                    return `
                        <div class="crypto-card" style="position: relative; overflow: hidden;">
                            <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 20px;">
                                <div style="font-size: 2.5rem;">${crypto.icon}</div>
                                <div>
                                    <div style="font-weight: 700; font-size: 1.2rem; color: var(--text-primary);">${crypto.symbol}</div>
                                    <div style="color: var(--text-muted); font-size: 0.9rem;">${crypto.name}</div>
                                </div>
                            </div>
                            
                            <div style="margin-bottom: 15px;">
                                <div style="font-size: 1.8rem; font-weight: 700; color: var(--text-primary); font-family: 'JetBrains Mono', monospace;">
                                    $${priceDisplay}
                                </div>
                            </div>
                            
                            <div style="display: flex; align-items: center; gap: 8px;">
                                <span style="color: ${isPositive ? '#22c55e' : '#ef4444'}; font-weight: 600; font-family: 'JetBrains Mono', monospace;">
                                    ${isPositive ? '+' : ''}${crypto.change.toFixed(2)}%
                                </span>
                                <span style="font-size: 1.2rem;">
                                    ${isPositive ? '📈' : '📉'}
                                </span>
                            </div>
                            
                            <div style="position: absolute; top: 0; right: 0; width: 4px; height: 100%; background: ${crypto.color}; opacity: 0.7;"></div>
                        </div>
                    `;
                }).join('');
                
                // Update timestamp
                const timestampEl = document.getElementById('crypto-last-update');
                if (timestampEl) {
                    timestampEl.textContent = new Date().toLocaleTimeString('fr-FR');
                }
                
                // Show update toast occasionally
                if (Math.random() < 0.3) {
                    const randomCrypto = cryptos[Math.floor(Math.random() * cryptos.length)];
                    const isUp = randomCrypto.change > 0;
                    showToast(
                        isUp ? 'success' : 'warning',
                        `${randomCrypto.symbol} ${isUp ? 'hausse' : 'baisse'}`,
                        `${randomCrypto.name}: ${isUp ? '+' : ''}${randomCrypto.change.toFixed(2)}%`,
                        3000
                    );
                }
            }

            // Close modal when clicking outside
            document.addEventListener('click', function(e) {
                const modal = document.getElementById('crypto-modal');
                if (e.target === modal) {
                    closeCryptoModal();
                }
            });

            // Clear crypto update interval when modal closes
            document.getElementById('crypto-modal').addEventListener('transitionend', function(e) {
                if (!this.classList.contains('show') && window.cryptoUpdateInterval) {
                    clearInterval(window.cryptoUpdateInterval);
                }
            });

            // Make functions globally available
            window.showToast = showToast;
            window.showCryptoTab = showCryptoTab;
            window.closeCryptoModal = closeCryptoModal;
        </script>
    {% endblock %}
</body>
</html>
